package com.toozo.asteriumwebserver.gamelogic;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import com.toozo.asteriumwebserver.gamelogic.PlayerCharacter;

/**
 * @author Studio Toozo
 */
public class GameState {
	// ===== FIELDS =====
	/* Map of player auth token to character */
	private Game game;
	private Map<String, PlayerCharacter> playerCharacterMap;
	private Map<Player, Boolean> playerReadyMap;
	private Collection<VictoryCondition> victoryConditions;
	private Inventory communalInventory;
	// ==================
	
	// ===== CONSTRUCTORS =====
	public GameState(Game game) {
		 this.playerCharacterMap = new ConcurrentHashMap<String, PlayerCharacter>();
		 this.playerReadyMap = new ConcurrentHashMap<Player, Boolean>();
		 this.victoryConditions = new ArrayList<VictoryCondition>();
		 this.communalInventory = new Inventory();
	}
	// ========================
	
	// ===== GETTERS =====
	public PlayerCharacter getCharacter(final String auth) {
		return playerCharacterMap.get(auth);
	}
	
	/**
	 * Gets a {@link Collection} of the {@link PlayerCharacter}s in the game.
	 * WARNING: Modifications to this Collection will affect 
	 * 			the GameState's map of {@link PlayerCharacter}s.
	 * 
	 * @return Collection<Character> containing the game's Characters.
	 */
	public Collection<PlayerCharacter> getCharacters() {
		return this.playerCharacterMap.values();
	}
	// ===================
	
	// ===== METHODS =====
	public boolean allCharactersReady() {
		for (Boolean bool : playerReadyMap.values()) {
			if (!bool) {
				return false;
			}
		}
		return true;
	}
	
	/**
	 * Toggles whether the {@link PlayerCharacter} belonging
	 * to the {@link Player} with authToken is ready or not.
	 * 
	 * @param authToken The auth token of the {@link Player}
	 */
	public void toggleReady(final String authToken) {
		PlayerCharacter character = this.playerCharacterMap.get(authToken);
		this.playerReadyMap.put(character, !playerReadyMap.get(character));
	}
	
	/**
	 * Add a {@link Player} to the {@link GameState} when they join the {@link Game}.
	 * 
	 * @param playerAuth The player's auth token
	 * @param character The new character
	 */
	public void addPlayer(final String playerAuth) {
		PlayerCharacter character = new PlayerCharacter();
		
		this.playerCharacterMap.put(playerAuth, character);
		this.playerReadyMap.put(character, false);
	}
	// ===================
}
