package com.toozo.asteriumwebserver.gamelogic.statuseffects;

import com.toozo.asteriumwebserver.gamelogic.PlayerCharacter;

/**
 * Status Effect which can be active on a {@link PlayerCharacter}.
 * Can have any or all of a myriad of different effects,
 * including modifying stats, exposure gained, et cetera.
 * 
 * @author Greg Schmitt
 */
public abstract class StatusEffect {
	// ===== CONSTANTS =====
	public static final String DEFAULT_NAME = "";
	public static final int DEFAULT_DURATION = Integer.MAX_VALUE;
	// =====================
	
	// ===== FIELDS =====
	private String name;
	private int duration;
	// ==================
	
	// ===== CONSTRUCTORS =====
	/**
	 * Construct an "permanent" StatusEffect with a given name.
	 * Permanent here means of practically infinite StatusEffect.
	 * 
	 * @param name The name of the StatusEffect.
	 */
	public StatusEffect(final String name) {
		this(name, DEFAULT_DURATION);
	}
	
	/**
	 * Construct a StatusEffect with a given name and defined duration (in turns).
	 * 
	 * @param name The name of the StatusEffect.
	 * @param duration The number of turns before this StatusEffect should go away.
	 */
	public StatusEffect(final String name, final int duration) {
		if (name != null) {
			this.name = name;
		} else {
			this.name = DEFAULT_NAME;
		}
		this.duration = duration
	}
	// ========================
	
	// ===== GETTERS =====
	/**
	 * @return the name of this StatusEffect.
	 */
	public String getName() {
		return this.name;
	}
	// ===================
	
	// ===== SETTERS =====
	/**
	 * Change the name of this StatusEffect iff newName is not null.
	 * 
	 * @param newName The new name of this StatusEffect.
	 */
	public void changeName(String newName) {
		if (newName != null) {
			this.name = newName;
		}
	}
	// ===================
	
	// ===== METHODS =====
	/**
	 * Default method to affect a {@link PlayerCharacter}'s {@link PlayerCharacter.Stats}.
	 * Does not modify stats by default.
	 * 
	 * Should be overridden in the implemented StatusEffect 
	 * if the implemented StatusEffect should affect stats.
	 * 
	 * @param stats The {@link PlayerCharacter.Stats} which will be affected.
	 * @return An affected copy of stats.
	 */
	public PlayerCharacter.Stats affectStats(PlayerCharacter.Stats stats) {
		return stats.deepCopy();
	}
	
	/**
	 * Default method to affect the amount of food a {@link PlayerCharacter} consumes.
	 * Does not affect food consumed by default.
	 * 
	 * Should be overridden in the implemented StatusEffect 
	 * if the implemented StatusEffect should affect exposure gained.
	 * 
	 * @param unmodifiedFoodConsumed The amount of food would have been consumed before this took effect.
	 * @return The amount of food which should be consumed after this took effect.
	 */
	public int affectFoodUsed(int unmodifiedFoodConsumed) {
		return unmodifiedFoodConsumed;
	}
	
	/**
	 * Default method to affect the amount of exposure a {@link PlayerCharacter} gains.
	 * Does not affect exposure gained by default.
	 * 
	 * Should be overridden in the implemented StatusEffect 
	 * if the implemented StatusEffect should affect exposure gained.
	 * 
	 * @param unmodifiedExposureGained The amount of exposure would have been gained before this took effect.
	 * @return The amount of exposure which should be gained after this took effect.
	 */
	public int affectExposureGained(int unmodifiedExposureGained) {
		return unmodifiedExposureGained;
	}
	// ===================
	
}
