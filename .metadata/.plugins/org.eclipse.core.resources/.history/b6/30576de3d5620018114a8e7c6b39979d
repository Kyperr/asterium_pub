package com.toozo.asteriumwebserver.actions;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.UUID;

import javax.websocket.Session;

import com.toozo.asteriumwebserver.gamelogic.Game;
import com.toozo.asteriumwebserver.gamelogic.GameManager;
import com.toozo.asteriumwebserver.gamelogic.GameState;
import com.toozo.asteriumwebserver.gamelogic.Inventory;
import com.toozo.asteriumwebserver.gamelogic.PlayerCharacter;
import com.toozo.asteriumwebserver.gamelogic.items.AbstractItem;
import com.toozo.asteriumwebserver.sessionmanager.SessionManager;

import actiondata.ErroredResponseData;
import actiondata.SuccessResponseData;
import actiondata.UseItemRequestData;
import actiondata.UseItemRequestData.ItemData;
import message.Message;
import message.Response;

/**
 * A {@link RequestAction} to move an {@link AbstractItem} to the communal inventory
 * from a {@link PlayerCharacter}'s personal inventory, or to move it from the communal
 * inventory to their personal inventory.
 * 
 * @author Studio Toozo
 */
public class CommunalInventoryAction extends Action {
	private GameState state;
	private PlayerCharacter owner;
	private ItemData itemData;
	private boolean personalToCommunal;

	public CommunalInventoryAction(final String authToken, final UUID messageID, 
								   final ItemData item, final boolean personalToCommunal) {
		super(Action.USE_ITEM, authToken, messageID);
		this.state = GameManager.getInstance().getGameForPlayer(authToken).getGameState();
		this.owner = this.state.getCharacter(authToken);
		this.itemData = item;
		this.personalToCommunal = personalToCommunal;
	}

	@Override
	protected void doAction() {
		String auth = getCallingAuthToken();
		Game game = GameManager.getInstance().getGameForPlayer(auth);
		Message message = null;
		if (game != null) {
			GameState state = game.getGameState();
			PlayerCharacter owner = this.owner;
			Inventory ownerInventory = owner.getInventory();
			
			if (personalToCommunal && owner.getI) {
				
			}
			
			/*
			AbstractItem item = AbstractItem.getItem(this.itemData.getItemID());
			
			if (owner != null && item != null && owner.getInventory().contains(item)) {
				item.use(state, owner, targets, this.personalToCommunal);
				
				if (Action.VERBOSE) {					
					System.out.printf("%s has used %s%s\n", 
									  owner.getCharacterName(),
									  item.getName(),
									  hasTargets? "" : " on " + targetNames);
				}
				
				SuccessResponseData data = new SuccessResponseData(Action.USE_ITEM);
				message = new Response(data, 0, this.getMessageID(), auth);
				
				//Update player clients
				if(this.personalToCommunal) {
					game.getGameState().syncPlayerClients();
				} else {
					game.getGameState().syncPlayerClient(auth);
				}
				
			} else {
				// No Such Item In Personal Inventory Error
				ErroredResponseData data = new ErroredResponseData(Action.USE_ITEM);
				message = new Response(data, SendErrorAction.NO_SUCH_ITEM_IN_PERSONAL_INVENTORY, this.getMessageID(),
						auth);
			}
			*/
		} else {
			ErroredResponseData data = new ErroredResponseData(Action.USE_ITEM);
			message = new Response(data, SendErrorAction.GAME_NOT_FOUND, this.getMessageID(), auth);
		}
		// Send the response back to the calling session.
		try {
			Session session = SessionManager.getInstance().getSession(getCallingAuthToken());
			synchronized (session) {
				session.getBasicRemote().sendText(message.jsonify().toString());
			}
		} catch (IOException e) {
			// Error cannot be sent, so display in console
			e.printStackTrace();
		}
	}

	/**
	 * Get a {@link CommunalInventoryAction} based on actionData.
	 * 
	 * @param message
	 *            The {@link Message} containing the {@link CommunalInventoryAction}.
	 * @return a {@link CommunalInventoryAction} containing the data from message.
	 */
	public static CommunalInventoryAction fromMessage(final Message message) {
		UseItemRequestData data = UseItemRequestData.class.cast(message.getActionData());
		return new CommunalInventoryAction(message.getAuthToken(), message.getMessageID(), data.getTargets(),
				data.getItem(), data.getIsCommunal());

	}

}
